{"version":3,"sources":["MyContext.js","components/RegistrationForm.js","components/LoginForm.js","MyProvider.js","App.js","serviceWorker.js","index.js"],"names":["MyContext","createContext","RegistrationForm","state","username","password","confirmPassword","registerHandler","regDetails","trim","alert","Axios","post","then","res","data","error","resetState","setState","usernameInputHandler","event","target","value","passwordInputHandler","confirmPasswordInputHandler","this","className","type","name","onChange","onClick","e","React","Component","LoginForm","loginHandler","loginDetails","MyProvider","Provider","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.577173c3.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\n\r\nconst MyContext = createContext();\r\n\r\nexport default MyContext;","import React from 'react';\r\nimport Axios from 'axios';\r\nclass RegistrationForm extends React.Component {\r\n    \r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    }\r\n\r\n    registerHandler = (regDetails)=> {\r\n        if(regDetails.username.trim() === '' || regDetails.password.trim() === '' || regDetails.confirmPassword.trim() === ''){\r\n            alert(\"please fill up the form\");\r\n        }else {\r\n            Axios.post('http://localhost:8080/users/register', regDetails)\r\n            .then(res => {\r\n                if(res.data.error){\r\n                    alert(res.data.error);\r\n                }else {\r\n                    alert(\"Registered!\")\r\n                    this.resetState();\r\n                }\r\n                \r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    resetState = ()=> {\r\n        this.setState({\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        })\r\n    }\r\n\r\n    usernameInputHandler = (event)=> {\r\n        this.setState({\r\n            username: event.target.value\r\n        });\r\n    };\r\n\r\n    passwordInputHandler = (event)=> {\r\n        this.setState({\r\n            password: event.target.value\r\n        });\r\n    };\r\n\r\n    confirmPasswordInputHandler = (event)=> {\r\n        this.setState({\r\n            confirmPassword: event.target.value\r\n        });\r\n    };\r\n       \r\n    render(){\r\n        const regDetails = {\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            confirmPassword: this.state.confirmPassword\r\n        }\r\n           \r\n        return (\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Registration</h1>\r\n                <label>Username </label><input type=\"text\" value={this.state.username} name=\"registrationForm\" onChange={this.usernameInputHandler}/>\r\n                <label>Password </label><input type=\"password\" value={this.state.password} name=\"registrationForm\" onChange={this.passwordInputHandler}/>\r\n                <label>Confirm Password </label><input type=\"password\" value={this.state.confirmPassword} name=\"registrationForm\" onChange={this.confirmPasswordInputHandler}/>\r\n                <button className=\"formBtn\" onClick={(e)=>{this.registerHandler(regDetails)}}>Register</button>\r\n                <p>Already registered?</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegistrationForm;","import React from 'react';\r\nimport Axios from 'axios';\r\nclass LoginForm extends React.Component {\r\n    state = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n\r\n    loginHandler = (loginDetails)=> {\r\n        if(loginDetails.username.trim() === '' || loginDetails.password.trim() === ''){\r\n            alert(\"please fill up the form\");\r\n        }else {\r\n            Axios.post('http://localhost:8080/users/login', loginDetails)\r\n            .then(res => {\r\n                if(res.data.error){\r\n                    alert(res.data.error);\r\n                }else {\r\n                    alert(`Welcome ${res.data.username}`)\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    resetState = ()=> {\r\n        this.setState({\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        })\r\n    }\r\n\r\n    usernameInputHandler = (event)=> {\r\n        this.setState({\r\n            username: event.target.value\r\n        });\r\n    };\r\n\r\n    passwordInputHandler = (event)=> {\r\n        this.setState({\r\n            password: event.target.value\r\n        });\r\n    };\r\n\r\n    render(){\r\n        const loginDetails = {\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            confirmPassword: this.state.confirmPassword\r\n        }\r\n\r\n        return (\r\n            <div className=\"form\">\r\n            <h1 className=\"title\">Login</h1>\r\n            <label>Username </label><input type=\"text\" value={this.state.username} name=\"registrationForm\" onChange={this.usernameInputHandler}/>\r\n            <label>Password </label><input type=\"password\" value={this.state.password} name=\"registrationForm\" onChange={this.passwordInputHandler}/>\r\n            <button className=\"formBtn\" onClick={(e)=>{this.loginHandler(loginDetails)}}>Login</button>\r\n            <p>Not yet registered?</p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport MyContext from './MyContext';\r\nimport RegistrationForm from './components/RegistrationForm';\r\nimport LoginForm from './components/LoginForm';\r\nimport Axios from 'axios';\r\nclass MyProvider extends React.Component {\r\n\r\n    \r\n    state = {\r\n\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <MyContext.Provider value={this.state}>\r\n                <RegistrationForm />\r\n                <LoginForm /> \r\n            </MyContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyProvider;","import React from 'react';\nimport './App.css';\nimport MyProvider from './MyProvider';\nclass App extends React.Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div id=\"mainContainer\">\n            <h1>Social Media App</h1>\n            <MyProvider />\n          </div>\n        </header>\n      </div>\n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}